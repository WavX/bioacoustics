// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// threshold_detection_impl
Rcpp::List threshold_detection_impl(const std::vector<int>& audio_samples, size_t sample_rate, size_t threshold, double min_d, double max_d, double min_TBE, double max_TBE, double EDG, size_t LPF, size_t HPF, double dur_t, double snr_t, double angl_t, size_t FFT_size, double FFT_overlap, double start_t, double end_t, const size_t NWS, double KPE, double KME);
RcppExport SEXP _bioacoustics_threshold_detection_impl(SEXP audio_samplesSEXP, SEXP sample_rateSEXP, SEXP thresholdSEXP, SEXP min_dSEXP, SEXP max_dSEXP, SEXP min_TBESEXP, SEXP max_TBESEXP, SEXP EDGSEXP, SEXP LPFSEXP, SEXP HPFSEXP, SEXP dur_tSEXP, SEXP snr_tSEXP, SEXP angl_tSEXP, SEXP FFT_sizeSEXP, SEXP FFT_overlapSEXP, SEXP start_tSEXP, SEXP end_tSEXP, SEXP NWSSEXP, SEXP KPESEXP, SEXP KMESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type audio_samples(audio_samplesSEXP);
    Rcpp::traits::input_parameter< size_t >::type sample_rate(sample_rateSEXP);
    Rcpp::traits::input_parameter< size_t >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< double >::type min_d(min_dSEXP);
    Rcpp::traits::input_parameter< double >::type max_d(max_dSEXP);
    Rcpp::traits::input_parameter< double >::type min_TBE(min_TBESEXP);
    Rcpp::traits::input_parameter< double >::type max_TBE(max_TBESEXP);
    Rcpp::traits::input_parameter< double >::type EDG(EDGSEXP);
    Rcpp::traits::input_parameter< size_t >::type LPF(LPFSEXP);
    Rcpp::traits::input_parameter< size_t >::type HPF(HPFSEXP);
    Rcpp::traits::input_parameter< double >::type dur_t(dur_tSEXP);
    Rcpp::traits::input_parameter< double >::type snr_t(snr_tSEXP);
    Rcpp::traits::input_parameter< double >::type angl_t(angl_tSEXP);
    Rcpp::traits::input_parameter< size_t >::type FFT_size(FFT_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type FFT_overlap(FFT_overlapSEXP);
    Rcpp::traits::input_parameter< double >::type start_t(start_tSEXP);
    Rcpp::traits::input_parameter< double >::type end_t(end_tSEXP);
    Rcpp::traits::input_parameter< const size_t >::type NWS(NWSSEXP);
    Rcpp::traits::input_parameter< double >::type KPE(KPESEXP);
    Rcpp::traits::input_parameter< double >::type KME(KMESEXP);
    rcpp_result_gen = Rcpp::wrap(threshold_detection_impl(audio_samples, sample_rate, threshold, min_d, max_d, min_TBE, max_TBE, EDG, LPF, HPF, dur_t, snr_t, angl_t, FFT_size, FFT_overlap, start_t, end_t, NWS, KPE, KME));
    return rcpp_result_gen;
END_RCPP
}
// blob_detection_impl
Rcpp::List blob_detection_impl(const std::vector<int>& audio_samples, size_t sample_rate, size_t FFT_size, double FFT_overlap, double min_TBE, double max_TBE, size_t HPF, size_t LPF, double min_d, double max_d, size_t area, double blur_f, double bg_substract, double EDG, double boost);
RcppExport SEXP _bioacoustics_blob_detection_impl(SEXP audio_samplesSEXP, SEXP sample_rateSEXP, SEXP FFT_sizeSEXP, SEXP FFT_overlapSEXP, SEXP min_TBESEXP, SEXP max_TBESEXP, SEXP HPFSEXP, SEXP LPFSEXP, SEXP min_dSEXP, SEXP max_dSEXP, SEXP areaSEXP, SEXP blur_fSEXP, SEXP bg_substractSEXP, SEXP EDGSEXP, SEXP boostSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type audio_samples(audio_samplesSEXP);
    Rcpp::traits::input_parameter< size_t >::type sample_rate(sample_rateSEXP);
    Rcpp::traits::input_parameter< size_t >::type FFT_size(FFT_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type FFT_overlap(FFT_overlapSEXP);
    Rcpp::traits::input_parameter< double >::type min_TBE(min_TBESEXP);
    Rcpp::traits::input_parameter< double >::type max_TBE(max_TBESEXP);
    Rcpp::traits::input_parameter< size_t >::type HPF(HPFSEXP);
    Rcpp::traits::input_parameter< size_t >::type LPF(LPFSEXP);
    Rcpp::traits::input_parameter< double >::type min_d(min_dSEXP);
    Rcpp::traits::input_parameter< double >::type max_d(max_dSEXP);
    Rcpp::traits::input_parameter< size_t >::type area(areaSEXP);
    Rcpp::traits::input_parameter< double >::type blur_f(blur_fSEXP);
    Rcpp::traits::input_parameter< double >::type bg_substract(bg_substractSEXP);
    Rcpp::traits::input_parameter< double >::type EDG(EDGSEXP);
    Rcpp::traits::input_parameter< double >::type boost(boostSEXP);
    rcpp_result_gen = Rcpp::wrap(blob_detection_impl(audio_samples, sample_rate, FFT_size, FFT_overlap, min_TBE, max_TBE, HPF, LPF, min_d, max_d, area, blur_f, bg_substract, EDG, boost));
    return rcpp_result_gen;
END_RCPP
}
// read_wac_impl
Rcpp::List read_wac_impl(const std::string filepath, const std::string filename);
RcppExport SEXP _bioacoustics_read_wac_impl(SEXP filepathSEXP, SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type filepath(filepathSEXP);
    Rcpp::traits::input_parameter< const std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(read_wac_impl(filepath, filename));
    return rcpp_result_gen;
END_RCPP
}
// fspec_impl
Rcpp::NumericMatrix fspec_impl(const std::vector<int>& audio_samples, const size_t& fft_size, const double& fft_overlap, const std::string& win, const size_t& HPF_bin, const size_t& LPF_bin, const size_t& FLL_bin, const size_t& FUL_bin, const bool& rotate);
RcppExport SEXP _bioacoustics_fspec_impl(SEXP audio_samplesSEXP, SEXP fft_sizeSEXP, SEXP fft_overlapSEXP, SEXP winSEXP, SEXP HPF_binSEXP, SEXP LPF_binSEXP, SEXP FLL_binSEXP, SEXP FUL_binSEXP, SEXP rotateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type audio_samples(audio_samplesSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type fft_size(fft_sizeSEXP);
    Rcpp::traits::input_parameter< const double& >::type fft_overlap(fft_overlapSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type win(winSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type HPF_bin(HPF_binSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type LPF_bin(LPF_binSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type FLL_bin(FLL_binSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type FUL_bin(FUL_binSEXP);
    Rcpp::traits::input_parameter< const bool& >::type rotate(rotateSEXP);
    rcpp_result_gen = Rcpp::wrap(fspec_impl(audio_samples, fft_size, fft_overlap, win, HPF_bin, LPF_bin, FLL_bin, FUL_bin, rotate));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bioacoustics_threshold_detection_impl", (DL_FUNC) &_bioacoustics_threshold_detection_impl, 20},
    {"_bioacoustics_blob_detection_impl", (DL_FUNC) &_bioacoustics_blob_detection_impl, 15},
    {"_bioacoustics_read_wac_impl", (DL_FUNC) &_bioacoustics_read_wac_impl, 2},
    {"_bioacoustics_fspec_impl", (DL_FUNC) &_bioacoustics_fspec_impl, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_bioacoustics(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
